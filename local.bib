@InProceedings{alti:csl99,
  author = 	 {Thorsten Altenkirch and Bernhard Reus},
  title = 	 {Monadic presentations of lambda terms using generalized inductive types},
  booktitle = 	 {Computer Science Logic, 13th International Workshop, CSL '99},
  year =	 {1999}, 
  pages     = {453-468}
}

@article{mcbride2006type,
  title={Type-preserving renaming and substitution},
  author={McBride, Conor},
  journal={Journal of Functional Programming},
  year={2006}
}

@inproceedings{allais2017type,
  title={Type-and-scope safe programs and their proofs},
  author={Allais, Guillaume and Chapman, James and McBride, Conor and McKinna, James},
  booktitle={Proceedings of the 6th ACM SIGPLAN Conference on Certified Programs and Proofs},
  pages={195--207},
  year={2017}
}
@article{altenkirch2015monads,
  title={Monads need not be endofunctors},
  author={Altenkirch, Thosten and Chapman, James and Uustalu, Tarmo},
  journal={Logical methods in computer science},
  volume={11},
  year={2015},
  publisher={Episciences. org}
}
@Article{alti:jfp02,
  author = 	 {Andreas Abel and Thorsten Altenkirch},
  title = 	 {A Predicative Analysis of Structural Recursion},
  journal = 	 {Journal of Functional Programming},
  year = 	 2002,
  volume =	 12,
  number =	 1,
  pages =	 {1--41},
  month =	 {January}
}
@misc{agda,
  author = "The Agda Team",
  title = "Agda Documentation",
  howpublished = "\url{https://agda.readthedocs.io}",
  year = 	 2024,
  note = "Accessed: 2024-08-26"
}
@inproceedings{kaposi2023towards,
  title={Towards quotient inductive-inductive-recursive types},
  author={Ambrus Kaposi},
  booktitle={29th International Conference on Types for Proofs and Programs TYPES 2023--Abstracts},
  year = 	 2023,  
  pages={124}
}
@inproceedings{altenkirch2023munchhausen,
  title={The M{\"u}nchhausen Method in Type Theory},
  author={Altenkirch, Thorsten and Kaposi, Ambrus and {\v{S}}inkarovs, Artjoms and V{\'e}gh, Tam{\'a}s},
  booktitle={28th International Conference on Types for Proofs and Programs 2022},
  pages={10},
  year={2023},
  organization={Schloss Dagstuhl-Leibniz-Zentrum f{\"u}r Informatik}
}
@book{curry1958combinatory,
  title={Combinatory logic},
  author={Curry, Haskell Brooks and Feys, Robert},
  volume={1},
  year={1958},
  publisher={North-Holland Amsterdam}
}
@article{de_bruijn_lambda_1972,
	title = {Lambda calculus notation with nameless dummies, a tool for automatic formula manipulation, with application to the {Church}-{Rosser} theorem},
	volume = {75},
	issn = {1385-7258},
	url = {https://www.sciencedirect.com/science/article/pii/1385725872900340},
	doi = {10.1016/1385-7258(72)90034-0},
	abstract = {In ordinary lambda calculus the occurrences of a bound variable are made recognizable by the use of one and the same (otherwise irrelevant) name at all occurrences. This convention is known to cause considerable trouble in cases of substitution. In the present paper a different notational system is developed, where occurrences of variables are indicated by integers giving the “distance” to the binding λ instead of a name attached to that λ. The system is claimed to be efficient for automatic formula manipulation as well as for metalingual discussion. As an example the most essential part of a proof of the Church-Rosser theorem is presented in this namefree calculus.},
	number = {5},
	urldate = {2024-08-28},
	journal = {Indagationes Mathematicae (Proceedings)},
	author = {de Bruijn, N. G},
	month = jan,
	year = {1972},
	pages = {381--392},
	file = {ScienceDirect Snapshot:/Users/wadler/Zotero/storage/HUQN42XP/1385725872900340.html:text/html;Submitted Version:/Users/wadler/Zotero/storage/W8Q4QNXF/de Bruijn - 1972 - Lambda calculus notation with nameless dummies, a .pdf:application/pdf},
}

@article{castellan2021categories,
  title={Categories with families: Unityped, simply typed, and dependently typed},
  author={Castellan, Simon and Clairambault, Pierre and Dybjer, Peter},
  journal={Joachim Lambek: The Interplay of Mathematics, Logic, and Linguistics},
  pages={135--180},
  year={2021},
  publisher={Springer}
}

@inproceedings{stark2019autosubst,
  title={Autosubst 2: reasoning with multi-sorted de Bruijn terms and vector substitutions},
  author={Stark, Kathrin and Sch{\"a}fer, Steven and Kaiser, Jonas},
  booktitle={Proceedings of the 8th ACM SIGPLAN International Conference on Certified Programs and Proofs},
  pages={166--180},
  year={2019}
}

@inproceedings{saffrich2024abstractions,
  title={Abstractions for Multi-Sorted Substitutions},
  author={Saffrich, Hannes},
  booktitle={15th International Conference on Interactive Theorem Proving (ITP 2024)},
  year={2024},
  organization={Schloss Dagstuhl--Leibniz-Zentrum f{\"u}r Informatik}
}

@inproceedings{saffrich2024intrinsically,
  title={Intrinsically Typed Syntax, a Logical Relation, and the Scourge of the Transfer Lemma},
  author={Saffrich, Hannes and Thiemann, Peter and Weidner, Marius},
  booktitle={Proceedings of the 9th ACM SIGPLAN International Workshop on Type-Driven Development},
  pages={2--15},
  year={2024}
}


@book{curry_combinatory_1958,
	series = {Combinatory {Logic}},
	title = {Combinatory {Logic}},
	url = {https://books.google.co.uk/books?id=fEnuAAAAMAAJ},
	number = {v. 1},
	publisher = {North-Holland Publishing Company},
	author = {Curry, H.B. and Feys, R.},
	year = {1958},
	lccn = {a59001593},
}

@article{altenkirch2016tt_in_tt,
title = {Type theory in type theory using quotient inductive types},
author = {Altenkirch, Thorsten and Kaposi, Ambrus},
booktitle = {Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
year = {2016},
pages = {18–29},
issue_date = {January 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {51},
number = {1},
issn = {0362-1340},
doi = {10.1145/2914770.2837638},
journal = {SIGPLAN Not.},
month = {jan},
numpages = {12},
}

@article{wadler_explicit_2024,
	title = {Explicit weakening},
	volume = {413},
	issn = {2075-2180},
	url = {http://arxiv.org/abs/2412.03124},
	doi = {10.4204/EPTCS.413.2},
	abstract = {I present a novel formulation of substitution, where facts about substitution that previously required tens or hundreds of lines to justify in a proof assistant now follow immediately - they can be justified by writing the four letters "refl". The paper is an executable literate Agda script, and source of the paper is available as an artifact in the file Weaken.lagda.md. Not all consequences of the pandemic have been awful. For the last three years, I've had the great pleasure of meeting with Peter Thiemann and Jeremy Siek for a couple of hours every week, via Zoom, exploring topics including core calculi, gradual typing, and formalisation in Agda. The work reported here arose from those discussions, and is dedicated to Peter on the occasion of his 60th birthday.},
	urldate = {2024-12-30},
	journal = {Electronic Proceedings in Theoretical Computer Science},
	author = {Wadler, Philip},
	month = nov,
	year = {2024},
	note = {Festschrift for Peter Thiemann},
	keywords = {Computer Science - Logic in Computer Science, Computer Science - Programming Languages},
	pages = {15--26},
	file = {Preprint PDF:/Users/philipwadler/Zotero/storage/THSKE5SY/Wadler - 2024 - Explicit Weakening.pdf:application/pdf;Snapshot:/Users/philipwadler/Zotero/storage/NEUG5QP4/2412.html:text/html},
}

@inproceedings{keller2010hereditary,
  title={Hereditary substitutions for simple types, formalized},
  author={Keller, Chantal and Altenkirch, Thorsten},
  booktitle={Proceedings of the third ACM SIGPLAN workshop on Mathematically structured functional programming},
  pages={3--10},
  year={2010}
}

@Unpublished{abel:subst11,
  author = 	 {Andreas Abel},
  title = 	 {Parallel substitution as an operation for untyped de Bruijn terms},
  note = 	 {Agda proof},
  OPTkey = 	 {},
  OPTmonth = 	 {},
  year =	 {2011},
  OPTannote = 	 {}
}

@article{mcbride2018everybody,
title = "Everybody's got to be somewhere",
abstract = "The key to any nameless representation of syntax is how it indicates the variables we choose to use and thus, implicitly, those we discard. Standard de Bruijn representations delay discarding maximally till the leaves of terms where one is chosen from the variables in scope at the expense of the rest. Consequently, introducing new but unused variables requires term traversal. This paper introduces a nameless 'co-de-Bruijn' representation which makes the opposite canonical choice, delaying discarding minimally, as near as possible to the root. It is literate Agda: dependent types make it a practical joy to express and be driven by strong intrinsic invariants which ensure that scope is aggressively whittled down to just the support of each subterm, in which every remaining variable occurs somewhere. The construction is generic, delivering a universe of syntaxes with higher-order metavariables, for which the appropriate notion of substitution is hereditary. The implementation of simultaneous substitution exploits tight scope control to avoid busywork and shift terms without traversal. Surprisingly, it is also intrinsically terminating, by structural recursion alone. ",
keywords = "variables, syntaxes, nameless representation, structural recursion",
author = "Conor McBride",
year = "2018",
month = jul,
day = "10",
doi = "10.4204/EPTCS.275.6",
language = "English",
volume = "275",
pages = "53--69",
journal = "Electronic Proceedings in Theoretical Computer Science",
issn = "2075-2180",
publisher = "Open Publishing Association",
note = "Mathematically Structured Functional Programming, MSFP ; Conference date: 08-07-2018 Through 08-07-2018",
url = "https://msfp2018.bentnib.org/",
}
